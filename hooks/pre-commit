#!/bin/sh
# Assumptions:
#
#    Puppet >= 2.7 is installed on this machine
#    puppet-lint is installed on this machine
#    devscripts is installed on this machine
#    ERB is installed on this machine
#    git is installed on this machine
#    sed is installed on this machine
#    Adjust LINTFLAGS as appropriate

# Redirect output to stderr.
exec 1>&2

PUPPETLINT_FLAGS=${PUPPETLINT_FLAGS:-"
--no-autoloader_layout-check
--no-80chars-check
--no-2sp_soft_tabs-check
--no-hard_tabs-check
--no-only_variable_string-check
--with-context
--with-filename
"}
TMPFILE=$(mktemp /tmp/tmp.XXXXXXXXXX)
STATUS=0

# Register exit trap for removing temporary files
trap 'rm -rf $TMPFILE' EXIT INT HUP

check_bash() {
  bash -n "$1" 2>&1
  if [ $? -ne 0 ]; then
    echo "bash syntax error in ${2}" >&2
    STATUS=2
  fi
  sed -i -e 's%^#!/bin/bash%#!/bin/sh%g' "$1" >/dev/null 2>&1
  /usr/bin/checkbashisms "${1}" 2>&1
  if [ $? -ne 0 ]; then
    echo "sh syntax error in $2" >&2
    STATUS=2
  fi
}

fix_trailing_ws_and_stage() {
  # Fix trailing whitespaces
  echo "### Fixing whitespaces, if any, in $1" >&2
  sed -i 's/[[:space:]]*$//' "$1"
  git add "$1"
}

# Check for Puppet binary
which puppet >/dev/null 2>&1 || exit 1

# Check for puppet-lint
which puppet-lint >/dev/null 2>&1 || exit 1

# Check for erb
which erb >/dev/null 2>&1 || exit 1

# Get correct git revision
if git rev-parse --quiet --verify HEAD > /dev/null
then
  revision=HEAD
else
  # Initial commit: diff against an empty tree object
  revision=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

IFS="
"

# Get a list of files changed in this transaction
FILES="$(git diff --cached --name-only --diff-filter=ACM "${revision}" ':(exclude)*.png')"
for file in $FILES ; do
  # Don't check empty files
  f=`git cat-file -s :0:$file`
  [ -z $f ] && continue
  if [ $f -eq 0 ]; then
    continue
  fi

  extension="${file#*.}"
  git cat-file blob ":0:${file}" > $TMPFILE
  rc=$?
  if [ $rc -ne 0 ]; then
    echo "Unable to checkout ${file}"
    STATUS=2
  else
    case $extension in
      pp)
        # Remove import lines while parsing
        # http://projects.puppetlabs.com/issues/9670#note-14
        sed -i -e '/^import / d' $TMPFILE >/dev/null 2>&1
        # Puppet syntax check
        puppet parser validate $TMPFILE >/dev/null 2>&1
        if [ $? -ne 0 ]; then
          echo "Puppet syntax error in ${file}. Run 'puppet parser validate ${file}'" >&2
          STATUS=2
        fi

        # puppet-lint check
        puppet-lint $PUPPETLINT_FLAGS --log-format "${file}:%{linenumber} %{KIND} - %{message}" $TMPFILE 2> /dev/null
        if [ $? -ne 0 ] ; then
          STATUS=2
        fi
      ;;

      erb | rb)
          # syntax check templates - this doesn't catch a lot of mistakes,
          # but it should catch gross mistakes
          erb -P -x -T '-' "${TMPFILE}" | ruby -c > /dev/null 2>&1
          if [ $? -ne 0 ]; then
              echo "ERB syntax error in ${file}" >&2
              STATUS=2
          fi
      ;;

      sh )
         check_bash ${TMPFILE} ${file}
      ;;

      yaml )
         python /usr/local/sbin/check-params.py -d $TMPFILE
      ;;

      j2.yaml )
      ;;

      *)
        case $(file --mime --brief ${file}) in
          *x-shellscript*)
            check_bash ${TMPFILE} $file
            ;;
          *x-ruby*)
            ruby -c $x
            ;;
          *x-python*)
            python -m py_compile $file
            ;;
          *x-perl*)
            perl -c $file
            ;;
        esac
      ;;
    esac

    fix_trailing_ws_and_stage "${file}"
  fi
done

exit $STATUS
